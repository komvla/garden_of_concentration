{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, ref, reactive, computed, watch } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { useStore } from 'vuex';\nexport default defineComponent({\n  setup() {\n    // router & store\n    const route = useRoute();\n    const router = useRouter();\n    const store = useStore();\n    const fields = computed(() => store.state.fields);\n\n    // plant info\n\n    const plantType = route.params.type;\n    const plantInfo = store.state.typesPlants.find(item => item.type === plantType);\n\n    // timer functionality \n    const buttonRef = ref(null);\n    const timeLeft = reactive({\n      value: plantInfo.growingTime\n    });\n    const timer = ref(null);\n    let buttonPlacePlantIsClickedOnce = false;\n    const gameState = reactive({\n      started: false,\n      finished: false,\n      won: false\n    });\n    const message = ref('');\n    const showMessage = ref(false);\n    const startTimer = () => {\n      if (!gameState.started) {\n        gameState.started = true;\n        timer.value = setInterval(() => {\n          timeLeft.value--;\n          if (timeLeft.value === 0) {\n            clearInterval(timer.value);\n            gameState.finished = true;\n            gameState.won = true;\n          }\n        }, 1000);\n      }\n    };\n    const stopTimer = () => {\n      if (gameState.started && !gameState.finished) {\n        clearInterval(timer.value);\n        gameState.finished = true;\n        gameState.won = false;\n      }\n    };\n    const resetGame = () => {\n      timeLeft.value = plantInfo.growingTime;\n      gameState.started = false;\n      gameState.finished = false;\n      gameState.won = false;\n    };\n    const buttonText = computed(() => {\n      if (gameState.finished) {\n        return gameState.won ? 'You win!' : 'You lose!';\n      }\n      return gameState.started ? `${timeLeft.value} seconds left` : 'Move cursor to start';\n    });\n    const showTryAgain = computed(() => {\n      return gameState.finished && !gameState.won;\n    });\n    const showButtonPlaceAPlant = computed(() => {\n      return gameState.finished && gameState.won;\n    });\n    const placeAPlant = () => {\n      buttonPlacePlantIsClickedOnce = true;\n      store.commit('placePlantToField', {\n        type: plantType\n      });\n    };\n    watch(() => fields.value, () => {\n      router.push('/');\n    });\n    return {\n      plantInfo,\n      plantType,\n      buttonRef,\n      buttonText,\n      showTryAgain,\n      showButtonPlaceAPlant,\n      startTimer,\n      stopTimer,\n      resetGame,\n      message,\n      showMessage,\n      placeAPlant,\n      buttonPlacePlantIsClickedOnce\n    };\n  }\n});","map":{"version":3,"mappings":"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","names":["defineComponent","ref","reactive","computed","watch","useRoute","useRouter","useStore","setup","route","router","store","fields","state","plantType","params","type","plantInfo","typesPlants","find","item","buttonRef","timeLeft","value","growingTime","timer","buttonPlacePlantIsClickedOnce","gameState","started","finished","won","message","showMessage","startTimer","setInterval","clearInterval","stopTimer","resetGame","buttonText","showTryAgain","showButtonPlaceAPlant","placeAPlant","commit","push"],"sourceRoot":"","sources":["/home/vlad/Escritorio/Programming/garden_of_concentration/src/components/pages/GrowSpot.vue"],"sourcesContent":["<template>\n    <v-card     \n    class=\"mx-auto my-10 \"\n    max-width=\"600\"\n    >\n    <div class=\"container grid grid-cols-1 gap-4  justify-items-center\">\n    <h3 class=\"\">{{plantInfo.name}}</h3>\n    <div class=\"img-wrapper\">\n    <img class=\" h-64\" :src=\"require(`@/assets/${plantInfo.type}.png`)\" />\n    </div>\n    <v-card-content>\n  <div>\n    <div class=\"text-center\">\n      <button\n        ref=\"button\"\n        class=\"px-6 py-3 bg-green-500 text-white rounded-lg m-2\"\n        @mouseover=\"startTimer\"\n        @mouseout=\"stopTimer\"\n      >\n        {{ buttonText }}\n      </button>\n      <button\n        class=\"ml-2 px-6 py-3 bg-red-500 text-white rounded-lg m-2\"\n        v-if=\"showTryAgain\"\n        @click=\"resetGame\"\n      >\n        Try Again\n      </button>\n      <button\n        ref=\"button\"\n        class=\"px-6 py-3 bg-green-500 text-white rounded-lg m-2\"\n        v-if=\"showButtonPlaceAPlant\"\n        @click=\"placeAPlant\"\n      >\n        Place a plant\n      </button>\n\n    </div>\n\n  </div>\n    </v-card-content>\n    </div>\n\n    </v-card>\n</template>\n<script>\n\nimport { defineComponent, ref, reactive, computed, watch } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport { useStore } from 'vuex';\n\n\nexport default defineComponent({\n\n  setup() {\n    // router & store\n    const route = useRoute();\n    const router = useRouter();\n    const store = useStore();\n    const fields = computed(() => store.state.fields);   \n\n    // plant info\n\n    const plantType = route.params.type;\n    const plantInfo = store.state.typesPlants.find(item => item.type === plantType);\n\n    // timer functionality \n    const buttonRef = ref(null);\n    const timeLeft = reactive({ value: plantInfo.growingTime });\n    const timer = ref(null);\n    let buttonPlacePlantIsClickedOnce = false;\n    const gameState = reactive({\n      started: false,\n      finished: false,\n      won: false,\n    });\n    const message = ref('');\n    const showMessage = ref(false);\n\n    const startTimer = () => {\n      if (!gameState.started) {\n        gameState.started = true;\n        timer.value = setInterval(() => {\n          timeLeft.value--;\n          if (timeLeft.value === 0) {\n            clearInterval(timer.value);\n            gameState.finished = true;\n            gameState.won = true;\n          }\n        }, 1000);\n      }\n    };\n\n    const stopTimer = () => {\n      if (gameState.started && !gameState.finished) {\n        clearInterval(timer.value);\n        gameState.finished = true;\n        gameState.won = false;\n      }\n    };\n\n    const resetGame = () => {\n      timeLeft.value = plantInfo.growingTime;\n      gameState.started = false;\n      gameState.finished = false;\n      gameState.won = false;\n    };\n\n    const buttonText = computed(() => {\n      if (gameState.finished) {\n        return gameState.won ? 'You win!' : 'You lose!';\n      }\n      return gameState.started ? `${timeLeft.value} seconds left` : 'Move cursor to start';\n    });\n\n    const showTryAgain = computed(() => {\n      return gameState.finished && !gameState.won;\n    });\n\n    const showButtonPlaceAPlant = computed(() => {\n      return gameState.finished && gameState.won;\n    });\n\n    const placeAPlant = () => {\n      buttonPlacePlantIsClickedOnce = true;\n      store.commit('placePlantToField', {type: plantType})\n    };\n\nwatch(() => fields.value, () => {\n  router.push('/');\n});\n   \n\n    return { \n      plantInfo, \n      plantType, \n      buttonRef,\n      buttonText,\n      showTryAgain,\n      showButtonPlaceAPlant,\n      startTimer,\n      stopTimer,\n      resetGame,\n      message,\n      showMessage,\n      placeAPlant,\n      buttonPlacePlantIsClickedOnce\n    };\n  },\n}) \n\n</script>\n<style scoped>\n    \n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}