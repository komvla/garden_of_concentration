{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container grid grid-cols-1 gap-4 justify-items-center\"\n};\nconst _hoisted_2 = {\n  class: \"\"\n};\nconst _hoisted_3 = {\n  class: \"img-wrapper\"\n};\nconst _hoisted_4 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_card_content = _resolveComponent(\"v-card-content\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  return _openBlock(), _createBlock(_component_v_card, {\n    class: \"mx-auto my-10\",\n    \"max-width\": \"600\"\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"h3\", _hoisted_2, _toDisplayString(_ctx.plantInfo.name), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"img\", {\n      class: \"h-64\",\n      src: require(`@/assets/${_ctx.plantInfo.type}.png`)\n    }, null, 8 /* PROPS */, _hoisted_4)]), _createVNode(_component_v_card_content, null, {\n      default: _withCtx(() => [_createElementVNode(\"button\", {\n        onMousedown: _cache[0] || (_cache[0] = (...args) => _ctx.startTimer && _ctx.startTimer(...args)),\n        onMouseleave: _cache[1] || (_cache[1] = (...args) => _ctx.resetTimer && _ctx.resetTimer(...args)),\n        onMouseenter: _cache[2] || (_cache[2] = (...args) => _ctx.showButton && _ctx.showButton(...args))\n      }, \"Start\", 32 /* HYDRATE_EVENTS */), _createElementVNode(\"div\", null, _toDisplayString(_ctx.message), 1 /* TEXT */)]),\n\n      _: 1 /* STABLE */\n    })])]),\n\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"mappings":";;EAKSA,KAAK,EAAC;AAAwD;;EAC/DA,KAAK,EAAC;AAAE;;EACPA,KAAK,EAAC;AAAa;;;;;uBANxBC,aAeSC;IAdTF,KAAK,EAAC,eAAgB;IACtB,WAAS,EAAC;;sBAEV,MASM,CATNG,oBASM,OATNC,UASM,GARND,oBAAoC,MAApCE,UAAoC,mBAArBC,cAAS,CAACC,IAAI,kBAC7BJ,oBAEM,OAFNK,UAEM,GADNL,oBAAsE;MAAjEH,KAAK,EAAC,MAAO;MAAES,GAAG,EAAEC,OAAO,aAAaJ,cAAS,CAACK,IAAI;2CAE3DC,aAGiBC;wBAFjB,MAAgG,CAAhGV,oBAAgG;QAAvFW,WAAS,yCAAER,2CAAU;QAAGS,YAAU,yCAAET,2CAAU;QAAGU,YAAU,yCAAEV,2CAAU;SAAE,OAAK,4BACvFH,oBAAwB,8BAAhBG,YAAO","names":["class","_createBlock","_component_v_card","_createElementVNode","_hoisted_1","_hoisted_2","_ctx","name","_hoisted_3","src","require","type","_createVNode","_component_v_card_content","onMousedown","onMouseleave","onMouseenter"],"sourceRoot":"","sources":["/home/vlad/Escritorio/Programming/garden_of_concentration/src/components/pages/GrowSpot.vue"],"sourcesContent":["<template>\n    <v-card     \n    class=\"mx-auto my-10 \"\n    max-width=\"600\"\n    >\n    <div class=\"container grid grid-cols-1 gap-4  justify-items-center\">\n    <h3 class=\"\">{{plantInfo.name}}</h3>\n    <div class=\"img-wrapper\">\n    <img class=\" h-64\" :src=\"require(`@/assets/${plantInfo.type}.png`)\" />\n    </div>\n    <v-card-content>\n    <button @mousedown=\"startTimer\" @mouseleave=\"resetTimer\" @mouseenter=\"showButton\">Start</button>\n    <div>{{ message }}</div>\n    </v-card-content>\n    </div>\n\n    </v-card>\n</template>\n<script>\n\nimport { defineComponent, ref } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { useStore } from 'vuex';\n\n\nexport default defineComponent({\n\n  setup() {\n        const message = ref('');\n    let timer = null;\n    let startTime = null;\n\n    const startTimer = () => {\n      startTime = Date.now();\n      timer = setTimeout(() => {\n        message.value = 'win';\n      }, 3000);\n    };\n\n    const resetTimer = () => {\n      clearTimeout(timer);\n      message.value = 'lose';\n    };\n\n    const showButton = () => {\n      if (timer) {\n        const elapsedTime = Date.now() - startTime;\n        if (elapsedTime >= 3000) {\n          message.value = 'win';\n        } else {\n          clearTimeout(timer);\n          message.value = 'lose';\n        }\n      }\n    };\n\n    const route = useRoute();\n    const store = useStore();\n\n    const plantType = route.params.type;\n    \n    const plantInfo = store.state.typesPlants.find(item => item.type === plantType);\n\n    return { \n      plantInfo, \n      plantType, \n      message,\n      startTimer,\n      resetTimer,\n      showButton \n    };\n  },\n}) \n\n</script>\n<style scoped>\n    \n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}